{"version":3,"sources":["NumberConverter.js","utils.js","SubnetResult.js","IPV4NetworkingComponent.js","App.js","reportWebVitals.js","index.js"],"names":["NumberConverter","useState","number","setNumber","baseGiven","setBaseGiven","baseWanted","setBaseWanted","calcSteps","setCalcSteps","btnDisabled","getDigits","base","Array","keys","map","x","toString","parseInt","validateNumber","digits","every","item","includes","calculate","dezimalNumber","preSteps","n","b","steps","oldN","r","Math","floor","convertedR","push","reverse","convertedNumber","join","dynHeight","reduce","a","v","Row","className","Col","md","FloatingLabel","controlId","label","Form","Select","value","onChange","event","target","FormControl","placeholder","disabled","style","textAlign","Button","onClick","deziNumber","forEach","digit","i","convertedDigit","deziDigits","pow","Control","as","height","dezimalToBinary","dezimalToOctetBinary","length","unshift","binaryToDezimal","binary","dezi","addLeadingZeroes","binarySize","size","isValidNumber","getSubnetCountStupid","mask1","mask2","subnetBits","j","getNetworkIDs","addr","subnetMask","fuckMask","subnetOctets","networkIncrement","flat","split","filter","baseNetwork","octet","foo","sort","booleanANDBinary","firstSubnet","broadcast","valueB","exponent","maxBinary","bla","subnets","networkID","match","rangeStart","rangeEnd","networkRange","bits","some","SubnetResultComponent","props","tableData","subnet","Table","striped","bordered","hover","IPV4NetworkingComponent","addrOctets","setAddrOctets","addrDezimals","setAddrDezimals","cidr","setCidr","localSubOctets","setLocalSubOctets","localSubDezimals","setLocalSubDezimals","localCidr","setLocalCidr","showBinary","setShowBinary","addLeadingZeroesHandler","index","octets","subOctets","subDezimals","oct","xlocalSubOctets","xlocalSubDezimals","sm","span","InputGroup","variant","val","type","dezimals","setDezimalHandler","setOctetHandler","onBlur","setLocalSubDezimalHandler","setLocalSubOctetHandler","slice","SubnetResult","App","Container","Accordion","defaultActiveKey","Item","eventKey","Header","Body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAmLeA,EA/KS,WAEpB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,mBAAS,MAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCJ,mBAAS,KAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,GAAeR,IAAWE,IAAcE,EAExCK,EAAY,SAACC,GACf,MAAgB,OAATA,EACD,sBAAIC,MAAM,IAAIC,QAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,cACpE,YAAIJ,MAAMK,SAASN,IAAOE,QAAQC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,eAsBjDE,EAAiB,SAACjB,EAAQkB,GAC5B,OAAO,YAAIlB,GAAQmB,OAAM,SAAAC,GAAI,OAAIF,EAAOG,SAASD,EAAKL,gBA4CpDO,EAAY,SAACC,EAAeC,GAM9B,IALA,IAAIN,EAAS,GACTO,EAAIF,EACJG,EAAIV,SAASZ,GACbuB,EAAQH,GAAY,KAEX,CACT,IAAII,EAAOH,EACPI,EAAIJ,EAAIC,EACZD,EAAIK,KAAKC,MAAMN,EAAIC,GACnB,IAAIM,OAAU,EACd,OAAQH,GACJ,KAAK,GACDG,EAAa,IACb,MACJ,KAAK,GACDA,EAAa,IACb,MACJ,KAAK,GACDA,EAAa,IACb,MACJ,KAAK,GACDA,EAAa,IACb,MACJ,KAAK,GACDA,EAAa,IACb,MACJ,KAAK,GACDA,EAAa,IACb,MACJ,QACIA,EAAaH,EAMrB,GAFAX,EAAOe,KAAKD,GACZL,GAAa,mBAAeC,EAAf,eAA0BF,EAA1B,kBAAqCD,EAArC,iBAA+CO,EAA/C,MACH,IAANP,EAAS,MAGjBP,EAAOgB,UAEP,IAAIC,EAAkBjB,EAAOkB,KAAK,IAElCT,GAAa,kCAA8BQ,EAA9B,wBAA6D/B,GAE1EG,EAAaoB,IAGXU,EAAyE,GAA7D,YAAI/B,GAAWgC,QAAO,SAACC,EAAGC,GAAJ,MAAgB,OAANA,EAAaD,EAAI,EAAIA,IAAG,GAE1E,OACI,qCACI,eAACE,EAAA,EAAD,CAAKC,UAAU,MAAf,UACI,cAACC,EAAA,EAAD,CAAKC,IAAE,EAAP,SAGI,cAACC,EAAA,EAAD,CAAeC,UAAU,kBAAkBC,MAAM,aAAjD,SACI,eAACC,EAAA,EAAKC,OAAN,CAAaC,MAAOhD,EAAWiD,SA/GzB,SAACC,GACvB,IAAQF,EAAUE,EAAMC,OAAhBH,MACJhC,EAAST,EAAUyC,GACvB/C,EAAa+C,GAERjC,EAAejB,EAAQkB,IAASjB,EAAU,MA0G/B,UACI,wBAAQiD,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,uBAIZ,cAACP,EAAA,EAAD,UACI,cAACW,EAAA,EAAD,CAAaJ,MAAOlD,EAAQmD,SAnIhB,SAACC,GACzB,IAAQF,EAAUE,EAAMC,OAAhBH,MAEJhC,EAAST,EAAUP,GACXe,EAAeiC,EAAOhC,IAGvBjB,EAAUiD,IA4HkDK,YAAY,eAAeC,UAAWtD,MAErG,cAACyC,EAAA,EAAD,UAEI,cAACE,EAAA,EAAD,CAAeC,UAAU,kBAAkBC,MAAM,cAAjD,SACI,eAACC,EAAA,EAAKC,OAAN,CAAaC,MAAO9C,EAAY+C,SAAU,SAACC,GAAD,OAAW/C,EAAc+C,EAAMC,OAAOH,QAAhF,UACI,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,0BAKhB,qBAAKO,MAAO,CAACC,UAAW,UAAxB,SAAmC,cAACC,EAAA,EAAD,CAAQH,SAAUhD,EAAaoD,QA1HrD,WACjB,IAAIC,EAAa,EACblC,EAAQ,GACM,OAAdzB,GACA,YAAIF,GAAQkC,UAAU4B,SAAQ,SAACC,EAAOC,GAClC,IAAIC,EACJ,OAAQF,GACJ,IAAK,IACDE,EAAiB,GACjB,MACJ,IAAK,IACDA,EAAiB,GACjB,MACJ,IAAK,IACDA,EAAiB,GACjB,MACJ,IAAK,IACDA,EAAiB,GACjB,MACJ,IAAK,IACDA,EAAiB,GACjB,MACJ,IAAK,IACDA,EAAiB,GACjB,MACJ,QACIA,EAAiBjD,SAAS+C,GAElC,IAAIG,EAAaD,EAAiBnC,KAAKqC,IAAInD,SAASd,GAAY8D,GAChErC,GAAa,UAAMsC,EAAN,cAA0B/D,EAA1B,cAAyC8D,EAAzC,cAAgDE,EAAhD,MACbL,GAAcK,KAGlBvC,GAAa,UAAM3B,EAAN,wBAA4BE,EAA5B,eAA4C2D,EAA5C,sBAEbvC,EAAUuC,EAAYlC,IAEtBL,EAAUtB,IAqFyB,yBAGnC,cAACgD,EAAA,EAAKoB,QAAN,CACIZ,UAAQ,EACRa,GAAG,WACHd,YAAY,sDACZL,MAAO5C,EACPmD,MAAO,CAAEa,OAAQjC,EAAY,Y,gBC5KhCkC,EAAkB,SAACvE,GAK5B,IAHA,IAAIkB,EAAS,GACTO,EAAIzB,IAEK,CACT,IAAI6B,EAAIJ,EAAI,EAGZ,GAFAA,EAAIK,KAAKC,MAAMN,EAAI,GACnBP,EAAOe,KAAKJ,GACF,IAANJ,EAAS,MAKjB,OAFAP,EAAOgB,UAEAhB,EAAOkB,KAAK,KAGVoC,EAAuB,SAACxE,GAKjC,IAHA,IAAIkB,EAAS,GACTO,EAAIzB,IAEK,CACT,IAAI6B,EAAIJ,EAAI,EAGZ,GAFAA,EAAIK,KAAKC,MAAMN,EAAI,GACnBP,EAAOe,KAAKJ,GACF,IAANJ,EAAS,MAKjB,IAFAP,EAAOgB,UAEAhB,EAAOuD,OAAS,GACnBvD,EAAOwD,QAAQ,KAGnB,OAAOxD,EAAOkB,KAAK,KAGVuC,EAAkB,SAACC,GAC5B,IAAIC,EAAO,EAMX,OAJA,YAAID,GAAQ1C,UAAU4B,SAAQ,SAACC,EAAOC,GACpB,MAAVD,IAAec,GAAQ/C,KAAKqC,IAAI,EAAGH,OAGpCa,GAaEC,EAAmB,SAAC5B,EAAO6B,GAGpC,IAFA,IAAIC,EAAOD,GAA0B,EACjC7D,EAAM,YAAOgC,GACVhC,EAAOuD,OAASO,GACnB9D,EAAOwD,QAAQ,KAGnB,OADaxD,EAAOkB,KAAK,KAqBhB6C,EAAgB,SAAC/B,GAC1B,OAAO,YAAIA,GAAO/B,OAAM,SAAAC,GAAI,MAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKC,SAASD,OA8BnF8D,EAAuB,SAACC,EAAOC,GACxC,IAAIC,EAAa,EAQjB,OAPAF,EAAMrB,SAAQ,SAAC1C,EAAK4C,GAChB,YAAI5C,GAAM0C,SAAQ,SAAChD,EAAEwE,GACdxE,IAAMsE,EAAMpB,GAAGsB,IACdD,UAILvD,KAAKqC,IAAI,EAAGkB,IAWVE,EAAgB,SAACC,EAAMC,EAAYC,GA0B5C,IAxBA,IAVgCC,EAU1BC,GAV0BD,EAUaF,EAAWI,OAAOzD,KAAK,IAAI0D,MAAM,IATvEhE,KAAKqC,IAAI,EAAGwB,EAAaI,QAAO,SAAA3E,GAAI,MAAa,MAATA,KAAcqD,SAWvDuB,EAAcR,EAAK3E,KAAI,SAACoF,EAAOjC,GAAR,OAxED,SAACzB,EAAGb,GAIhC,IAFA,IAAIwE,EAAM,CAAC3D,EAAGb,GAAGyE,MAAK,SAACnC,EAAGsB,GAAJ,OAAUtB,EAAES,OAASa,EAAEb,OAAS,GAAK,KAEpDyB,EAAI,GAAGzB,OAASyB,EAAI,GAAGzB,QAC1ByB,EAAI,GAAK,IAAMA,EAAI,GAGvB,IAAItB,EAAS,GAMb,OAJA,YAAIsB,EAAI,IAAIpC,SAAQ,SAACC,EAAOC,GACd,MAAVD,GAA+B,MAAdmC,EAAI,GAAGlC,GAAaY,GAAU,IAAMA,GAAU,OAG5DA,EA0DoCwB,CAAiBH,EAAOR,EAAWzB,OAQxEqC,EAAcL,EAEhBM,EAAYb,EAAW5E,KAAI,SAACC,EAAGkD,GAAJ,OA7DV,SAACd,EAAOqD,GAC7B,IAAIC,EAAW,YAAItD,GAAO6C,QAAO,SAAAxD,GAAC,MAAU,MAANA,KAAWkC,OAEjD,OAD0B,IAAb+B,EAAiB7B,EAAgB4B,GAAUzE,KAAKqC,IAAI,EAAGqC,GAAY,EA2DvCC,CAAU3F,EAAG0E,EAAKxB,OAKvD0C,EAAM,EACNC,EAAU,GAML3C,EAAE,EAAGA,EAAEkB,EAAqBO,EAAYC,GAAW1B,IAAK,CAE7D,IAAI4C,EAAY9B,EAAiBP,EAAgBI,EAAgB,YAAI0B,GAAajE,KAAK,KAAOsE,GAAK,IAC9FG,MAAM,WAAWhG,KAAI,SAAAC,GAAC,OAAI6D,EAAgB7D,MAAIsB,KAAK,KACpDkE,EAAYxB,EAAiBP,EAAgBI,EAAgB,YAAI0B,GAAajE,KAAK,KAAOsE,EAAMd,EAAmB,GAAG,IACrHiB,MAAM,WAAWhG,KAAI,SAAAC,GAAC,OAAI6D,EAAgB7D,MAAIsB,KAAK,KACpD0E,EAAahC,EAAiBP,EAAgBI,EAAgB,YAAI0B,GAAajE,KAAK,KAAOsE,EAAM,GAAG,IACnGG,MAAM,WAAWhG,KAAI,SAAAC,GAAC,OAAI6D,EAAgB7D,MAAIsB,KAAK,KACpD2E,EAAWjC,EAAiBP,EAAgBI,EAAgB,YAAI0B,GAAajE,KAAK,KAAOsE,EAAMd,EAAmB,GAAG,IACpHiB,MAAM,WAAWhG,KAAI,SAAAC,GAAC,OAAI6D,EAAgB7D,MAAIsB,KAAK,KACxDuE,EAAQ1E,KAAK,CAAC2E,YAAWI,aAAc,CAACF,EAAYC,EAAUnB,EAAmB,GAAIU,cACrFI,GAAOd,EAWX,OAPAH,EAAW3B,SAAQ,SAAC1C,EAAM4C,GACtB,IAAIiD,EAAO,YAAI7F,GAAMkB,QAAO,SAACC,EAAGC,GAAJ,MAAgB,MAANA,EAAYD,EAAI,EAAIA,IAAG,GACzD,YAAInB,GAAM8F,MAAK,SAAApG,GAAC,MAAU,MAANA,OACpBwF,EAAUtC,GAAKW,EAAgBqB,EAAYhC,IAAMlC,KAAKqC,IAAI,EAAG8C,GAAQ,MAItEN,G,QChJIQ,EApCe,SAACC,GAE3B,IAEMC,EAFcD,EAAZT,QAEkB9F,KAAI,SAACyG,EAAQtD,GACnC,IAAM4C,EAAsCU,EAAtCV,UAAWI,EAA2BM,EAA3BN,aAAcV,EAAagB,EAAbhB,UAC/B,OACI,+BACI,6BAAKtC,EAAI,IACT,6BAAK4C,IACL,+BAAKI,EAAa,GAAlB,MAAyBA,EAAa,GAAtC,KAA4CA,EAAa,GAAzD,aACA,6BAAKV,MAJAtC,MAWjB,OACI,eAACuD,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACI,+BACI,mCACA,2CACA,8CACA,gDAGR,gCACKL,QC0JFM,EApLwB,SAACP,GAEpC,MAAoCrH,mBAAS,CAAC,WAAY,WAAY,WAAY,aAAlF,mBAAO6H,EAAP,KAAmBC,EAAnB,KACA,EAAwC9H,mBAAS,CAAC,IAAK,IAAK,EAAG,IAA/D,mBAAO+H,EAAP,KAAqBC,EAArB,KAEA,EAAwBhI,mBAAS,IAAjC,mBAAOiI,EAAP,KAAaC,EAAb,KACA,EAA4ClI,mBAAS,CAAC,WAAY,WAAY,WAAY,aAA1F,mBAAOmI,EAAP,KAAuBC,EAAvB,KACA,EAAgDpI,mBAAS,CAAC,IAAK,IAAK,IAAK,IAAzE,mBAAOqI,EAAP,KAAyBC,EAAzB,KACA,EAAkCtI,mBAAS,IAA3C,mBAAOuI,EAAP,KAAkBC,EAAlB,KACA,EAAoCxI,oBAAS,GAA7C,mBAAOyI,EAAP,KAAmBC,EAAnB,KAmEMC,EAA0B,SAACtF,EAAOuF,GAEpC,IADA,IAAIC,EAAM,YAAOhB,GACVgB,EAAOD,GAAOlE,OAAS,GAC1BmE,EAAOD,GAAS,IAAMC,EAAOD,GAEjCd,EAAce,IAKZC,EAAY,YAAIlI,MAAM,IAAIC,QAAQC,KAAI,SAACC,EAAGkD,GAAJ,OAAUA,EAAIgE,EAAO,IAAM,OAAK5F,KAAK,IAAIyE,MAAM,WACrFiC,EAAcD,EAAUhI,KAAI,SAAAkI,GAAG,OAAIpE,EAAgBoE,MAEnDC,EAAkB,YAAIrI,MAAM,IAAIC,QAAQC,KAAI,SAACC,EAAGkD,GAAJ,OAAUA,EAAIsE,EAAY,IAAM,OAAKlG,KAAK,IAAIyE,MAAM,WAChGoC,EAAoBD,EAAgBnI,KAAI,SAAAkI,GAAG,OAAIpE,EAAgBoE,MAE/DpC,EAAUpB,EAAcqC,EAAYoB,EAAiBH,GAE3D,OACI,qCACI,eAACpG,EAAA,EAAD,WACI,iDACA,eAACE,EAAA,EAAD,CAAKuG,GAAI,CAAEC,KAAM,IAAjB,UACI,eAACC,EAAA,EAAD,CAAY1G,UAAU,OAAtB,UACI,cAACiB,EAAA,EAAD,CAAQ0F,QAASb,EAAa,UAAY,YAAa5E,QAAS,kBAAM6E,GAAeD,IAArF,SAAkG,cAAC,IAAD,MACjGV,EAAajH,KAAI,SAACyI,EAAKtF,GAAN,OACd,cAACV,EAAA,EAAD,CAAqBJ,MAAOoG,EAAKC,KAAK,OAAOpG,SAAU,SAACC,IA3FtD,SAACA,EAAOuF,GAE9B,IAAMzF,EAA+B,KAAvBE,EAAMC,OAAOH,MAAe,IAAME,EAAMC,OAAOH,MACvDlD,EAASgB,SAASkC,GAExB,GAAIlD,GAAU,GAAKA,GAAU,KAAOiF,EAAc/B,GAAQ,CACtD,IAAIsG,EAAQ,YAAO1B,GACnB0B,EAASb,GAASzF,EAElB,IAAI0F,EAAM,YAAOhB,GACjBgB,EAAOD,GAASnE,EAAqBtB,GAErC6E,EAAgByB,GAChB3B,EAAce,IA8EsEa,CAAkBrG,EAAOY,KAA3EA,SAIzBwE,EACG,cAACY,EAAA,EAAD,CAAY1G,UAAU,OAAtB,SAEKkF,EAAW/G,KAAI,SAACyI,EAAKtF,GAAN,OACZ,cAACV,EAAA,EAAD,CAAqBJ,MAAOoG,EAAKC,KAAK,OAClCpG,SAAU,SAACC,IAnFnB,SAACA,EAAOuF,GAC5B,IAAMzF,EAAUE,EAAMC,OAAhBH,MACN,GAAI,YAAIA,GAAO/B,OAAM,SAAAM,GAAC,MAAI,CAAC,IAAK,KAAKJ,SAASI,MAAK,CAE/C,IAAI+H,EAAQ,YAAO1B,GACnB0B,EAASb,GAAShE,EAAgBzB,GAElC,IAAI0F,EAAM,YAAOhB,GACjBgB,EAAOD,GAASzF,EAEhB6E,EAAgByB,GAChB3B,EAAce,IAwEiCc,CAAgBtG,EAAOY,IAC9C2F,OAAQ,SAACvG,GAAYsF,EAAwBtF,EAAMC,OAAOH,MAAOc,KAFnDA,QAKxB,QAGV,cAACrB,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,CAAeE,MAAM,OAArB,SACI,cAACC,EAAA,EAAKC,OAAN,CAAaC,MAAO8E,EAAM7E,SAAU,SAACC,GAAD,OAAW6E,EAAQ7E,EAAMC,OAAOH,QAApE,SACK,YAAIvC,MAAM,IAAIC,QAAQC,KAAI,SAAC2B,EAAGwB,GAAJ,OAAU,yBAAgBd,MAAOc,EAAvB,cAA4BA,IAAfA,eAKlE,eAACvB,EAAA,EAAD,WACI,4CACA,eAACE,EAAA,EAAD,WACI,cAACyG,EAAA,EAAD,UACKN,EAAYjI,KAAI,SAACyI,EAAKtF,GAAN,OACb,cAACV,EAAA,EAAD,CAAqBJ,MAAOoG,EAAKC,KAAK,OAAO/F,UAAQ,GAAnCQ,QAGzBwE,EACG,cAACY,EAAA,EAAD,CAAY1G,UAAU,OAAtB,SAEKmG,EAAUhI,KAAI,SAACyI,EAAKtF,GAAN,OACX,cAACV,EAAA,EAAD,CAAqBJ,MAAOoG,EAAKC,KAAK,OAAO/F,UAAQ,GAAnCQ,QAGxB,WAId,eAACvB,EAAA,EAAD,WACI,kDACA,eAACE,EAAA,EAAD,CAAKuG,GAAI,CAAEC,KAAM,IAAjB,UACI,eAACC,EAAA,EAAD,CAAY1G,UAAU,OAAtB,UACI,cAACiB,EAAA,EAAD,CAAQ0F,QAASb,EAAa,UAAY,YAAa5E,QAAS,kBAAM6E,GAAeD,IAArF,SAAkG,cAAC,IAAD,MACjGS,EAAkBpI,KAAI,SAACyI,EAAKtF,GAAN,OACnB,cAACV,EAAA,EAAD,CAAqBJ,MAAOoG,EAAKC,KAAK,OAAOpG,SAAU,SAACC,IA3G9C,SAACA,EAAOuF,GACtC,IAAMzF,EAA+B,KAAvBE,EAAMC,OAAOH,MAAe,IAAME,EAAMC,OAAOH,MACvDlD,EAASgB,SAASkC,GAExB,GAAIlD,GAAU,GAAKA,GAAU,KAAOiF,EAAc/B,GAAQ,CACtD,IAAIsG,EAAQ,YAAOpB,GACnBoB,EAASb,GAASzF,EAElB,IAAI0F,EAAM,YAAOV,GACjBU,EAAOD,GAASnE,EAAqBtB,GAErCmF,EAAoBmB,GACpBrB,EAAkBS,IA+FkEgB,CAA0BxG,EAAOY,KAAnFA,SAIzBwE,EACG,cAACY,EAAA,EAAD,CAAY1G,UAAU,OAAtB,SAEKsG,EAAgBnI,KAAI,SAACyI,EAAKtF,GAAN,OACjB,cAACV,EAAA,EAAD,CAAqBJ,MAAOoG,EAAKC,KAAK,OAClCpG,SAAU,SAACC,IApGX,SAACA,EAAOuF,GACpC,IAAMzF,EAAUE,EAAMC,OAAhBH,MACN,GAAI,YAAIA,GAAO/B,OAAM,SAAAM,GAAC,MAAI,CAAC,IAAK,KAAKJ,SAASI,MAAK,CAE/C,IAAI+H,EAAQ,YAAOpB,GACnBoB,EAASb,GAAShE,EAAgBzB,GAElC,IAAI0F,EAAM,YAAOV,GACjBU,EAAOD,GAASzF,EAEhBmF,EAAoBmB,GACpBrB,EAAkBS,IAyF6BiB,CAAwBzG,EAAOY,IACtD2F,OAAQ,SAACvG,GAAYsF,EAAwBtF,EAAMC,OAAOH,MAAOc,KAFnDA,QAKxB,QAGV,cAACrB,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,CAAeE,MAAM,OAArB,SACI,cAACC,EAAA,EAAKC,OAAN,CAAaC,MAAOoF,EAAWnF,SAAU,SAACC,GAAD,OAAWmF,EAAanF,EAAMC,OAAOH,QAA9E,SACK,YAAIvC,MAAM,IAAIC,QAAQC,KAAI,SAAC2B,EAAGwB,GAAJ,OAAU,yBAAgBd,MAAOc,EAAvB,cAA4BA,IAAfA,MAA4B8F,MAAM9B,YAKpG,cAAC+B,EAAD,CAAuBpD,QAASA,QChH7BqD,EA5DH,WAiCR,OAGI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAWC,iBAAiB,IAA5B,UACI,eAACD,EAAA,EAAUE,KAAX,CAAgBC,SAAS,IAAzB,UACI,cAACH,EAAA,EAAUI,OAAX,wCACA,cAACJ,EAAA,EAAUK,KAAX,UACG,cAAC,EAAD,SAGP,eAACL,EAAA,EAAUE,KAAX,CAAgBC,SAAS,IAAzB,UACI,cAACH,EAAA,EAAUI,OAAX,wBACA,cAACJ,EAAA,EAAUK,KAAX,UACI,cAAC,EAAD,eC7CTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ce87c0f8.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport { FormControl, Form, Button, FloatingLabel, Row, Col } from \"react-bootstrap\"\r\n\r\n\r\nconst NumberConverter = () => {\r\n\r\n    const [number, setNumber] = useState(\"\")\r\n    const [baseGiven, setBaseGiven] = useState(\"10\")\r\n    const [baseWanted, setBaseWanted] = useState(\"2\")\r\n    const [calcSteps, setCalcSteps] = useState(\"\")\r\n\r\n    const btnDisabled = !number || !baseGiven || !baseWanted\r\n\r\n    const getDigits = (base) => {\r\n        return base === \"16\"\r\n            ? [...Array(10).keys(), ...[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]].map(x => x.toString())\r\n            : [...Array(parseInt(base)).keys()].map(x => x.toString())\r\n    }\r\n\r\n    const onChangeGivenNumber = (event) => {\r\n        const { value } = event.target\r\n\r\n        let digits = getDigits(baseGiven)\r\n        let valid = validateNumber(value, digits)\r\n\r\n\r\n        if (valid) setNumber(value)\r\n\r\n    }\r\n\r\n    const onChangeGivenBase = (event) => {\r\n        const { value } = event.target\r\n        let digits = getDigits(value)\r\n        setBaseGiven(value)\r\n\r\n        if (!validateNumber(number, digits)) setNumber(\"0\");\r\n    }\r\n\r\n    const validateNumber = (number, digits) => {\r\n        return [...number].every(item => digits.includes(item.toString()))\r\n    }\r\n\r\n    const calculateAny = () => {\r\n        let deziNumber = 0\r\n        let steps = \"\"\r\n        if (baseGiven !== \"10\") {\r\n            [...number].reverse().forEach((digit, i) => {\r\n                let convertedDigit\r\n                switch (digit) {\r\n                    case \"a\":\r\n                        convertedDigit = 10\r\n                        break\r\n                    case \"b\":\r\n                        convertedDigit = 11\r\n                        break\r\n                    case \"c\":\r\n                        convertedDigit = 12\r\n                        break\r\n                    case \"d\":\r\n                        convertedDigit = 13\r\n                        break\r\n                    case \"e\":\r\n                        convertedDigit = 14\r\n                        break\r\n                    case \"f\":\r\n                        convertedDigit = 15\r\n                        break\r\n                    default:\r\n                        convertedDigit = parseInt(digit)\r\n                }\r\n                let deziDigits = convertedDigit * Math.pow(parseInt(baseGiven), i)\r\n                steps = steps + `${convertedDigit} * ${baseGiven} ^ ${i} = ${deziDigits}\\n`\r\n                deziNumber += deziDigits\r\n\r\n            })\r\n            steps = steps + `${number} to the base ${baseGiven} is ${deziNumber} in dezimal \\n\\n\\n`\r\n\r\n            calculate(deziNumber, steps)\r\n        } else {\r\n            calculate(number)\r\n        }\r\n    }\r\n\r\n    const calculate = (dezimalNumber, preSteps) => {\r\n        let digits = [];\r\n        let n = dezimalNumber;\r\n        let b = parseInt(baseWanted)\r\n        let steps = preSteps || \"\"\r\n\r\n        while (true) {\r\n            let oldN = n\r\n            let r = n % b;\r\n            n = Math.floor(n / b);\r\n            let convertedR\r\n            switch (r) {\r\n                case 10:\r\n                    convertedR = 'a'\r\n                    break\r\n                case 11:\r\n                    convertedR = 'b'\r\n                    break\r\n                case 12:\r\n                    convertedR = 'c'\r\n                    break\r\n                case 13:\r\n                    convertedR = 'd'\r\n                    break\r\n                case 14:\r\n                    convertedR = 'e'\r\n                    break\r\n                case 15:\r\n                    convertedR = 'f'\r\n                    break\r\n                default:\r\n                    convertedR = r\r\n\r\n            }\r\n\r\n            digits.push(convertedR);\r\n            steps = steps + `dividing ${oldN} by ${b} gives ${n} rest ${convertedR}\\n`\r\n            if (n === 0) break;\r\n        }\r\n\r\n        digits.reverse();\r\n\r\n        let convertedNumber = digits.join('');\r\n\r\n        steps = steps + `The converted number is ${convertedNumber} to the base ${baseWanted}`\r\n\r\n        setCalcSteps(steps)\r\n    }\r\n\r\n    const dynHeight = [...calcSteps].reduce((a, v) => v === \"\\n\" ? a + 1 : a, 0) * 35\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"g-2\">\r\n                <Col md>\r\n\r\n\r\n                    <FloatingLabel controlId=\"floatingSelect1\" label=\"Given Base\">\r\n                        <Form.Select value={baseGiven} onChange={onChangeGivenBase}>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"16\">16</option>\r\n                            <option value=\"10\">10</option>\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n                <Col>\r\n                    <FormControl value={number} onChange={onChangeGivenNumber} placeholder=\"enter number\" disabled={!baseGiven} />\r\n                </Col>\r\n                <Col>\r\n\r\n                    <FloatingLabel controlId=\"floatingSelect2\" label=\"Wanted Base\">\r\n                        <Form.Select value={baseWanted} onChange={(event) => setBaseWanted(event.target.value)}>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"16\">16</option>\r\n                            <option value=\"10\">10</option>\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n            </Row>\r\n            <div style={{textAlign: 'center'}}><Button disabled={btnDisabled} onClick={calculateAny}>Calculate</Button></div>\r\n            \r\n\r\n            <Form.Control\r\n                disabled\r\n                as=\"textarea\"\r\n                placeholder=\"Click calculate button to show calculation steps...\"\r\n                value={calcSteps}\r\n                style={{ height: dynHeight + 'px' }}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NumberConverter","export const dezimalToBinary = (number) => {\r\n\r\n    let digits = [];\r\n    let n = number;\r\n\r\n    while (true) {\r\n        let r = n % 2;\r\n        n = Math.floor(n / 2);\r\n        digits.push(r);\r\n        if (n === 0) break;\r\n    }\r\n\r\n    digits.reverse();\r\n\r\n    return digits.join('');\r\n}\r\n\r\nexport const dezimalToOctetBinary = (number) => {\r\n\r\n    let digits = [];\r\n    let n = number;\r\n\r\n    while (true) {\r\n        let r = n % 2;\r\n        n = Math.floor(n / 2);\r\n        digits.push(r);\r\n        if (n === 0) break;\r\n    }\r\n\r\n    digits.reverse();\r\n\r\n    while (digits.length < 8) {\r\n        digits.unshift(\"0\")\r\n    }\r\n\r\n    return digits.join('');\r\n}\r\n\r\nexport const binaryToDezimal = (binary) => {\r\n    let dezi = 0;\r\n\r\n    [...binary].reverse().forEach((digit, i) => {\r\n        if (digit === \"1\") dezi += Math.pow(2, i);\r\n    })\r\n\r\n    return dezi;\r\n}\r\n\r\nexport const anyNumberToDezimal = (anyNumber, base) => {\r\n    let dezi = 0;\r\n\r\n    [...anyNumber].reverse().forEach((digit, i) => {\r\n        dezi += parseInt(digit) * Math.pow(base, i);\r\n    })\r\n\r\n    return dezi;\r\n}\r\n\r\nexport const addLeadingZeroes = (value, binarySize) => {\r\n    let size = binarySize ? binarySize : 8;\r\n    let digits = [...value];\r\n    while (digits.length < size) {\r\n        digits.unshift(\"0\")\r\n    }\r\n    let binary = digits.join('');\r\n    return binary;\r\n}\r\n\r\nexport const booleanANDBinary = (a, b) => {\r\n\r\n    let foo = [a, b].sort((i, j) => i.length > j.length ? 1 : -1);\r\n\r\n    while (foo[0].length < foo[1].length) {\r\n        foo[0] = \"0\" + foo[0];\r\n    }\r\n\r\n    let binary = \"\";\r\n\r\n    [...foo[0]].forEach((digit, i) => {\r\n        digit === \"1\" && foo[1][i] === \"1\" ? binary += \"1\" : binary += \"0\"\r\n    })\r\n\r\n    return binary\r\n}\r\n\r\nexport const isValidNumber = (value) => {\r\n    return [...value].every(item => [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].includes(item))\r\n}\r\n\r\nexport const maxBinary = (value, valueB) => {\r\n    let exponent = [...value].filter(a => a === \"0\").length\r\n    let fooVal = exponent === 0 ? binaryToDezimal(valueB) : Math.pow(2, exponent) - 1\r\n    return fooVal\r\n}\r\n\r\nexport const consecutiveBinary = (value) => {\r\n    return value.split(\"0\").filter(i => i !== \"\").length <= 1 && (value[0] !== \"0\" || [...value].every(item => item === \"0\"))\r\n}\r\n\r\nexport const getSubnetBits = (subnetOctets) => {\r\n    return subnetOctets.map(item =>\r\n        [...item].some(x => x === \"0\")\r\n            ? [...item].reduce((a, v) => v === \"1\" ? a + 1 : a, 0)\r\n            : 0\r\n    ).reduce((sum, x) => sum + x)\r\n}\r\n\r\nexport const getSubnetCount = (subnetOctets) => {\r\n    const subnetBits = subnetOctets.map(item =>\r\n        [...item].some(x => x === \"0\")\r\n            ? [...item].reduce((a, v) => v === \"1\" ? a + 1 : a, 0)\r\n            : 0\r\n    ).reduce((sum, x) => sum + x)\r\n    return Math.pow(2, subnetBits)\r\n}\r\n\r\nexport const getSubnetCountStupid = (mask1, mask2) => {\r\n    let subnetBits = 0\r\n    mask1.forEach((item,i) => {\r\n        [...item].forEach((x,j) => {\r\n            if(x !== mask2[i][j]) {\r\n                subnetBits++\r\n            }\r\n        })\r\n    })\r\n    return Math.pow(2, subnetBits)\r\n}\r\n\r\nexport const getNetworkIncrement = (subnetOctets) => {\r\n    return Math.pow(2, subnetOctets.filter(item => item === \"0\").length)\r\n}\r\n\r\nexport const getMixedOctetIndex = (octets) => {\r\n    return octets.findIndex((x => ![...x].every(y => y === \"1\")))\r\n}\r\n\r\nexport const getNetworkIDs = (addr, subnetMask, fuckMask) => {\r\n\r\n    const networkIncrement = getNetworkIncrement(subnetMask.flat().join('').split('')) // blyat\r\n\r\n    const baseNetwork = addr.map((octet, i) => booleanANDBinary(octet, subnetMask[i]))\r\n\r\n    \r\n    \r\n    /* const firstSubnet = baseNetwork.map((octet, i) =>\r\n        \r\n        [...subnetMask[i]].includes(\"0\") ? [\"00000000\"] : octet\r\n    ) */\r\n    const firstSubnet = baseNetwork\r\n\r\n    let broadcast = subnetMask.map((x, i) => maxBinary(x, addr[i]))\r\n\r\n    //const mixedOctetIndex = getMixedOctetIndex(fuckMask)\r\n    \r\n\r\n    let bla = 0\r\n    let subnets = []\r\n\r\n    /* let bar = [...subnetMask.slice(mixedOctetIndex).join('')]\r\n    let baz = [...firstSubnet.slice(mixedOctetIndex).join('')]\r\n    let wtf = [...fuckMask.slice(mixedOctetIndex).join('')] */\r\n\r\n    for (var i=0; i<getSubnetCountStupid(subnetMask, fuckMask); i++) {\r\n        // FML!!!\r\n        let networkID = addLeadingZeroes(dezimalToBinary(binaryToDezimal([...firstSubnet].join('')) + bla),32)\r\n            .match(/.{1,8}/g).map(x => binaryToDezimal(x)).join('.')\r\n        let broadcast = addLeadingZeroes(dezimalToBinary(binaryToDezimal([...firstSubnet].join('')) + bla + networkIncrement - 1),32)\r\n            .match(/.{1,8}/g).map(x => binaryToDezimal(x)).join('.')\r\n        let rangeStart = addLeadingZeroes(dezimalToBinary(binaryToDezimal([...firstSubnet].join('')) + bla + 1),32)\r\n            .match(/.{1,8}/g).map(x => binaryToDezimal(x)).join('.')\r\n        let rangeEnd = addLeadingZeroes(dezimalToBinary(binaryToDezimal([...firstSubnet].join('')) + bla + networkIncrement - 2),32)\r\n            .match(/.{1,8}/g).map(x => binaryToDezimal(x)).join('.')\r\n        subnets.push({networkID, networkRange: [rangeStart, rangeEnd, networkIncrement - 2], broadcast})\r\n        bla += networkIncrement\r\n    }\r\n\r\n\r\n    subnetMask.forEach((item, i) => {\r\n        let bits = [...item].reduce((a, v) => v === \"0\" ? a + 1 : a, 0)\r\n        if ([...item].some(x => x === \"0\")) {\r\n            broadcast[i] = binaryToDezimal(baseNetwork[i]) + Math.pow(2, bits) - 1\r\n        }\r\n    })\r\n\r\n    return subnets\r\n}","import React from \"react\"\r\nimport { Table } from \"react-bootstrap\"\r\n\r\n\r\nconst SubnetResultComponent = (props) => {\r\n\r\n    const { subnets } = props\r\n\r\n    const tableData = subnets.map((subnet, i) => {\r\n        let { networkID, networkRange, broadcast} = subnet\r\n        return (\r\n            <tr key={i}>\r\n                <td>{i + 1}</td>\r\n                <td>{networkID}</td>\r\n                <td>{networkRange[0]} - {networkRange[1]} ({networkRange[2]} Hosts)</td>\r\n                <td>{broadcast}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    )\r\n\r\n    return (\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>NetworkID</th>\r\n                    <th>NetworkRange</th>\r\n                    <th>Broadcast</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tableData}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\n\r\nexport default SubnetResultComponent","import React, { useState } from \"react\";\r\nimport { Eye } from \"react-bootstrap-icons\";\r\nimport { Row, Col, InputGroup, FormControl, Button, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport { binaryToDezimal, isValidNumber, dezimalToOctetBinary, getNetworkIDs } from \"./utils\";\r\nimport SubnetResultComponent from \"./SubnetResult\"\r\n\r\n\r\nexport const IPV4NetworkingComponent = (props) => {\r\n\r\n    const [addrOctets, setAddrOctets] = useState([\"11000000\", \"10101000\", \"00000001\", \"00000000\"]);\r\n    const [addrDezimals, setAddrDezimals] = useState([192, 168, 1, 0]);\r\n\r\n    const [cidr, setCidr] = useState(24);\r\n    const [localSubOctets, setLocalSubOctets] = useState([\"11111111\", \"11111111\", \"11111111\", \"00000000\"]);\r\n    const [localSubDezimals, setLocalSubDezimals] = useState([255, 255, 255, 0]);\r\n    const [localCidr, setLocalCidr] = useState(24)\r\n    const [showBinary, setShowBinary] = useState(false)\r\n\r\n    const setDezimalHandler = (event, index) => {\r\n\r\n        const value = event.target.value === \"\" ? \"0\" : event.target.value\r\n        const number = parseInt(value);\r\n\r\n        if (number >= 0 && number <= 255 && isValidNumber(value)) {\r\n            let dezimals = [...addrDezimals]\r\n            dezimals[index] = value\r\n\r\n            let octets = [...addrOctets]\r\n            octets[index] = dezimalToOctetBinary(value)\r\n\r\n            setAddrDezimals(dezimals)\r\n            setAddrOctets(octets)\r\n        }\r\n    }\r\n\r\n    const setOctetHandler = (event, index) => {\r\n        let { value } = event.target;\r\n        if ([...value].every(n => [\"0\", \"1\"].includes(n))) {\r\n\r\n            let dezimals = [...addrDezimals]\r\n            dezimals[index] = binaryToDezimal(value)\r\n\r\n            let octets = [...addrOctets]\r\n            octets[index] = value\r\n\r\n            setAddrDezimals(dezimals)\r\n            setAddrOctets(octets)\r\n\r\n        }\r\n    }\r\n\r\n    const setLocalSubDezimalHandler = (event, index) => {\r\n        const value = event.target.value === \"\" ? \"0\" : event.target.value\r\n        const number = parseInt(value);\r\n\r\n        if (number >= 0 && number <= 255 && isValidNumber(value)) {\r\n            let dezimals = [...localSubDezimals]\r\n            dezimals[index] = value\r\n\r\n            let octets = [...localSubOctets]\r\n            octets[index] = dezimalToOctetBinary(value)\r\n\r\n            setLocalSubDezimals(dezimals)\r\n            setLocalSubOctets(octets)\r\n        }\r\n    }\r\n\r\n    const setLocalSubOctetHandler = (event, index) => {\r\n        let { value } = event.target;\r\n        if ([...value].every(n => [\"0\", \"1\"].includes(n))) {\r\n\r\n            let dezimals = [...localSubDezimals]\r\n            dezimals[index] = binaryToDezimal(value)\r\n\r\n            let octets = [...localSubOctets]\r\n            octets[index] = value\r\n\r\n            setLocalSubDezimals(dezimals)\r\n            setLocalSubOctets(octets)\r\n\r\n        }\r\n    }\r\n\r\n    const addLeadingZeroesHandler = (event, index) => {\r\n        let octets = [...addrOctets]\r\n        while (octets[index].length < 8) {\r\n            octets[index] = '0' + octets[index]\r\n        }\r\n        setAddrOctets(octets)\r\n    }\r\n\r\n    //const styles = new Array(4).map(s => { })\r\n\r\n    const subOctets = [...Array(32).keys()].map((x, i) => i < cidr ? \"1\" : \"0\").join('').match(/.{1,8}/g)\r\n    const subDezimals = subOctets.map(oct => binaryToDezimal(oct))\r\n\r\n    const xlocalSubOctets = [...Array(32).keys()].map((x, i) => i < localCidr ? \"1\" : \"0\").join('').match(/.{1,8}/g)\r\n    const xlocalSubDezimals = xlocalSubOctets.map(oct => binaryToDezimal(oct))\r\n\r\n    const subnets = getNetworkIDs(addrOctets, xlocalSubOctets, subOctets)\r\n\r\n    return (\r\n        <>\r\n            <Row >\r\n                <h4>Network Address</h4>\r\n                <Col sm={{ span: 10 }}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <Button variant={showBinary ? 'primary' : 'secondary'} onClick={() => setShowBinary(!showBinary)}><Eye /></Button>\r\n                        {addrDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" onChange={(event) => { setDezimalHandler(event, i) }} />\r\n                        )}\r\n\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {addrOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\"\r\n                                    onChange={(event) => { setOctetHandler(event, i) }}\r\n                                    onBlur={(event) => { addLeadingZeroesHandler(event.target.value, i) }} />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n                <Col>\r\n                    <FloatingLabel label=\"CIDR\">\r\n                        <Form.Select value={cidr} onChange={(event) => setCidr(event.target.value)}>\r\n                            {[...Array(33).keys()].map((v, i) => <option key={i} value={i}>/{i}</option>)}\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <h4>SubnetMask</h4>\r\n                <Col>\r\n                    <InputGroup>\r\n                        {subDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" disabled />\r\n                        )}\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {subOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\" disabled />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row >\r\n                <h4>Local Subnetmask</h4>\r\n                <Col sm={{ span: 10 }}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <Button variant={showBinary ? 'primary' : 'secondary'} onClick={() => setShowBinary(!showBinary)}><Eye /></Button>\r\n                        {xlocalSubDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" onChange={(event) => { setLocalSubDezimalHandler(event, i) }} />\r\n                        )}\r\n\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {xlocalSubOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\"\r\n                                    onChange={(event) => { setLocalSubOctetHandler(event, i) }}\r\n                                    onBlur={(event) => { addLeadingZeroesHandler(event.target.value, i) }} />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n                <Col>\r\n                    <FloatingLabel label=\"CIDR\">\r\n                        <Form.Select value={localCidr} onChange={(event) => setLocalCidr(event.target.value)}>\r\n                            {[...Array(32).keys()].map((v, i) => <option key={i} value={i}>/{i}</option>).slice(cidr)}\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n            </Row>\r\n            <SubnetResultComponent subnets={subnets} />\r\n        </>\r\n    )\r\n\r\n}\r\nexport default IPV4NetworkingComponent","/* import { useState } from \"react\"; */\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Accordion } from \"react-bootstrap\";\r\nimport NumberConverter from \"./NumberConverter\";\r\n/* import IPV4Component from \"./IPV4Component\";\r\nimport IPV4SolverComponent from \"./IPV4SolverComponent\"; */\r\nimport IPV4NetworkingComponent from \"./IPV4NetworkingComponent\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    /* const [octet1, setOctet1] = useState(\"11000000\");\r\n    const [octet2, setOctet2] = useState(\"10101000\");\r\n    const [octet3, setOctet3] = useState(\"00000001\");\r\n    const [octet4, setOctet4] = useState(\"00000000\");\r\n\r\n    const [dezi1, setDezi1] = useState(192);\r\n    const [dezi2, setDezi2] = useState(168);\r\n    const [dezi3, setDezi3] = useState(1);\r\n    const [dezi4, setDezi4] = useState(0);\r\n\r\n    const [subOctet1, setSubOctet1] = useState(\"11111111\");\r\n    const [subOctet2, setSubOctet2] = useState(\"11111111\");\r\n    const [subOctet3, setSubOctet3] = useState(\"11111111\");\r\n    const [subOctet4, setSubOctet4] = useState(\"11100000\");\r\n\r\n    const [subDezi1, setSubDezi1] = useState(255);\r\n    const [subDezi2, setSubDezi2] = useState(255);\r\n    const [subDezi3, setSubDezi3] = useState(255);\r\n    const [subDezi4, setSubDezi4] = useState(224);\r\n\r\n\r\n\r\n    const addrCount = Math.pow(2, [...subOctet1, ...subOctet2, ...subOctet3, ...subOctet4].filter(item => item === \"0\").length) - 2\r\n    const subnetBits = [subOctet1, subOctet2, subOctet3, subOctet4].map(item =>\r\n        [...item].some(x => x === \"0\")\r\n            ? [...item].reduce((a, v) => v === \"1\" ? a + 1 : a, 0)\r\n            : 0\r\n    ).reduce((sum, x) => sum + x)\r\n\r\n    const subnetCount = Math.pow(2, subnetBits) */\r\n\r\n    return (\r\n\r\n\r\n        <Container>\r\n            <Accordion defaultActiveKey=\"0\">\r\n                <Accordion.Item eventKey=\"0\">\r\n                    <Accordion.Header>Calculation Visualization</Accordion.Header>\r\n                    <Accordion.Body>\r\n                       <NumberConverter />\r\n                    </Accordion.Body>\r\n                </Accordion.Item>\r\n                <Accordion.Item eventKey=\"1\">\r\n                    <Accordion.Header>IPV4Stuff</Accordion.Header>\r\n                    <Accordion.Body>\r\n                        <IPV4NetworkingComponent />\r\n                        {/* <IPV4Component title={\"Network-Address\"} mehStuff={mehStuff[0]} />\r\n                        <IPV4Component title={\"Subnet Mask\"} mehStuff={mehStuff[1]} restricted />\r\n                        <h3>There are {subnetCount} subnets with {addrCount} hosts each available.</h3>\r\n                        <IPV4SolverComponent title={\"Network Address\"} mehStuff={mehStuff} /> */}\r\n                    </Accordion.Body>\r\n                </Accordion.Item>\r\n            </Accordion>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}