{"version":3,"sources":["NumberConverter.js","utils.js","SubnetResult.js","IPV4NetworkingComponent.js","IPV6NetworkingComponent.js","App.js","reportWebVitals.js","index.js"],"names":["NumberConverter","useState","number","setNumber","baseGiven","setBaseGiven","baseWanted","setBaseWanted","calcSteps","setCalcSteps","btnDisabled","getDigits","base","Array","keys","map","x","toString","parseInt","validateNumber","digits","every","item","includes","calculate","dezimalNumber","preSteps","n","b","steps","oldN","r","Math","floor","convertedR","push","reverse","convertedNumber","join","dynHeight","reduce","a","v","Row","className","Col","md","FloatingLabel","controlId","label","Form","Select","value","onChange","event","target","FormControl","placeholder","disabled","style","textAlign","Button","onClick","deziNumber","forEach","digit","i","convertedDigit","deziDigits","pow","Control","as","height","bigdecimal","require","dezimalToBinaryBig","BigInteger","divideAndRemainder","dezimalToHextetBinary","skipLeading","length","unshift","binaryToDezimal","binary","dezi","binaryToDezimalBig","deziB","add","binaryToHexBig","anyNumberToDezimal","anyNumber","d","addLeadingZeroes","binarySize","size","isValidNumber","getSubnetCountStupid","mask1","mask2","subnetBits","j","getNetworkIDs","addr","subnetMask","fuckMask","ipV6","subnetOctets","totalSize","regExp","RegExp","networkIncrement","flat","split","filter","baseNetwork","octet","foo","sort","booleanANDBinary","firstSubnet","subnets","z","blaAdd","networkID","broadcast","rangeStart","rangeEnd","addRange","subRange","addBroadcast","networkDezimalBig","broadcastDezimalBig","rangeStartDezimalBig","rangeEndDezimalBig","networkBinaryBig","broadcastBinaryBig","rangeStartBinaryBig","rangeEndBinaryBig","match","reservedHosts","networkRange","SubnetResultComponent","props","shortenAddr","indices","addrParts","indexOf","bla","slice","tableData","subnet","Table","striped","bordered","hover","IPV4NetworkingComponent","addrOctets","setAddrOctets","addrDezimals","setAddrDezimals","cidr","setCidr","localCidr","setLocalCidr","showBinary","setShowBinary","setDezimalHandler","index","valid","dezimals","octets","dezimalToOctetBinary","subOctets","subDezimals","oct","xlocalSubOctets","xlocalSubDezimals","sm","span","InputGroup","variant","val","type","setOctetHandler","onBlur","addLeadingZeroesHandler","SubnetResult","IPV6NetworkingComponent","binaryToHex","App","key","setKey","Container","Tabs","id","activeKey","onSelect","k","Tab","eventKey","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9efe56e5.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport { FormControl, Form, Button, FloatingLabel, Row, Col } from \"react-bootstrap\"\r\n\r\n\r\nconst NumberConverter = () => {\r\n\r\n    const [number, setNumber] = useState(\"\")\r\n    const [baseGiven, setBaseGiven] = useState(\"10\")\r\n    const [baseWanted, setBaseWanted] = useState(\"2\")\r\n    const [calcSteps, setCalcSteps] = useState(\"\")\r\n\r\n    const btnDisabled = !number || !baseGiven || !baseWanted\r\n\r\n    const getDigits = (base) => {\r\n        return base === \"16\"\r\n            ? [...Array(10).keys(), ...[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]].map(x => x.toString())\r\n            : [...Array(parseInt(base)).keys()].map(x => x.toString())\r\n    }\r\n\r\n    const onChangeGivenNumber = (event) => {\r\n        const { value } = event.target\r\n\r\n        let digits = getDigits(baseGiven)\r\n        let valid = validateNumber(value, digits)\r\n\r\n\r\n        if (valid) setNumber(value)\r\n\r\n    }\r\n\r\n    const onChangeGivenBase = (event) => {\r\n        const { value } = event.target\r\n        let digits = getDigits(value)\r\n        setBaseGiven(value)\r\n\r\n        if (!validateNumber(number, digits)) setNumber(\"0\");\r\n    }\r\n\r\n    const validateNumber = (number, digits) => {\r\n        return [...number].every(item => digits.includes(item.toString()))\r\n    }\r\n\r\n    const calculateAny = () => {\r\n        let deziNumber = 0\r\n        let steps = \"\"\r\n        if (baseGiven !== \"10\") {\r\n            [...number].reverse().forEach((digit, i) => {\r\n                let convertedDigit\r\n                switch (digit) {\r\n                    case \"a\":\r\n                        convertedDigit = 10\r\n                        break\r\n                    case \"b\":\r\n                        convertedDigit = 11\r\n                        break\r\n                    case \"c\":\r\n                        convertedDigit = 12\r\n                        break\r\n                    case \"d\":\r\n                        convertedDigit = 13\r\n                        break\r\n                    case \"e\":\r\n                        convertedDigit = 14\r\n                        break\r\n                    case \"f\":\r\n                        convertedDigit = 15\r\n                        break\r\n                    default:\r\n                        convertedDigit = parseInt(digit)\r\n                }\r\n                let deziDigits = convertedDigit * Math.pow(parseInt(baseGiven), i)\r\n                steps = steps + `${convertedDigit} * ${baseGiven} ^ ${i} = ${deziDigits}\\n`\r\n                deziNumber += deziDigits\r\n\r\n            })\r\n            steps = steps + `${number} to the base ${baseGiven} is ${deziNumber} in dezimal \\n\\n\\n`\r\n\r\n            calculate(deziNumber, steps)\r\n        } else {\r\n            calculate(number)\r\n        }\r\n    }\r\n\r\n    const calculate = (dezimalNumber, preSteps) => {\r\n        let digits = [];\r\n        let n = dezimalNumber;\r\n        let b = parseInt(baseWanted)\r\n        let steps = preSteps || \"\"\r\n\r\n        while (true) {\r\n            let oldN = n\r\n            let r = n % b;\r\n            n = Math.floor(n / b);\r\n            let convertedR\r\n            switch (r) {\r\n                case 10:\r\n                    convertedR = 'a'\r\n                    break\r\n                case 11:\r\n                    convertedR = 'b'\r\n                    break\r\n                case 12:\r\n                    convertedR = 'c'\r\n                    break\r\n                case 13:\r\n                    convertedR = 'd'\r\n                    break\r\n                case 14:\r\n                    convertedR = 'e'\r\n                    break\r\n                case 15:\r\n                    convertedR = 'f'\r\n                    break\r\n                default:\r\n                    convertedR = r\r\n\r\n            }\r\n\r\n            digits.push(convertedR);\r\n            steps = steps + `dividing ${oldN} by ${b} gives ${n} rest ${convertedR}\\n`\r\n            if (n === 0) break;\r\n        }\r\n\r\n        digits.reverse();\r\n\r\n        let convertedNumber = digits.join('');\r\n\r\n        steps = steps + `The converted number is ${convertedNumber} to the base ${baseWanted}`\r\n\r\n        setCalcSteps(steps)\r\n    }\r\n\r\n    const dynHeight = [...calcSteps].reduce((a, v) => v === \"\\n\" ? a + 1 : a, 0) * 35\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"g-2\">\r\n                <Col md>\r\n\r\n\r\n                    <FloatingLabel controlId=\"floatingSelect1\" label=\"Given Base\">\r\n                        <Form.Select value={baseGiven} onChange={onChangeGivenBase}>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"16\">16</option>\r\n                            <option value=\"10\">10</option>\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n                <Col>\r\n                    <FormControl value={number} onChange={onChangeGivenNumber} placeholder=\"enter number\" disabled={!baseGiven} />\r\n                </Col>\r\n                <Col>\r\n\r\n                    <FloatingLabel controlId=\"floatingSelect2\" label=\"Wanted Base\">\r\n                        <Form.Select value={baseWanted} onChange={(event) => setBaseWanted(event.target.value)}>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"16\">16</option>\r\n                            <option value=\"10\">10</option>\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n            </Row>\r\n            <div style={{textAlign: 'center'}}><Button disabled={btnDisabled} onClick={calculateAny}>Calculate</Button></div>\r\n            \r\n\r\n            <Form.Control\r\n                disabled\r\n                as=\"textarea\"\r\n                placeholder=\"Click calculate button to show calculation steps...\"\r\n                value={calcSteps}\r\n                style={{ height: dynHeight + 'px' }}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NumberConverter","var bigdecimal = require(\"bigdecimal\");\r\n\r\nexport const dezimalToBinary = (number) => {\r\n\r\n    let digits = [];\r\n    let n = number;\r\n\r\n    while (true) {\r\n        let r = n % 2;\r\n        n = Math.floor(n / 2);\r\n        digits.push(r);\r\n        if (n === 0) break;\r\n    }\r\n\r\n    digits.reverse();\r\n\r\n    return digits.join('');\r\n}\r\n\r\nexport const dezimalToBinaryBig = (number) => {\r\n    let digits = [];\r\n    let n = new bigdecimal.BigInteger(number.toString());\r\n    let r\r\n    let base = new bigdecimal.BigInteger(\"2\")\r\n\r\n    while (true) {\r\n        [n, r] = n.divideAndRemainder(base)\r\n        digits.push(r.toString())\r\n        if (n.toString() === \"0\") break\r\n    }\r\n\r\n    digits.reverse()\r\n\r\n    return digits.join('')\r\n\r\n}\r\n\r\nexport const dezimalToOctetBinary = (number) => {\r\n\r\n    let digits = [];\r\n    let n = number;\r\n\r\n    while (true) {\r\n        let r = n % 2;\r\n        n = Math.floor(n / 2);\r\n        digits.push(r);\r\n        if (n === 0) break;\r\n    }\r\n\r\n    digits.reverse();\r\n\r\n    while (digits.length < 8) {\r\n        digits.unshift(\"0\")\r\n    }\r\n\r\n    return digits.join('');\r\n}\r\n\r\nexport const dezimalToHextetBinary = (number, skipLeading) => {\r\n    let digits = [];\r\n    let n = number;\r\n\r\n    while (true) {\r\n        let r = n % 16;\r\n        n = Math.floor(n / 16);\r\n\r\n        let convertedR\r\n        switch (r) {\r\n            case 15:\r\n                convertedR = 'f'\r\n                break\r\n            case 14:\r\n                convertedR = 'e'\r\n                break\r\n            case 13:\r\n                convertedR = 'd'\r\n                break\r\n            case 12:\r\n                convertedR = 'c'\r\n                break\r\n            case 11:\r\n                convertedR = 'b'\r\n                break\r\n            case 10:\r\n                convertedR = 'a'\r\n                break\r\n            default:\r\n                convertedR = r\r\n        }\r\n\r\n        digits.push(convertedR);\r\n        if (n === 0) break;\r\n    }\r\n\r\n    digits.reverse();\r\n\r\n    if (skipLeading) {\r\n        return digits.join('')\r\n    }\r\n\r\n    while (digits.length < 16) {\r\n        digits.unshift(\"0\")\r\n    }\r\n\r\n    return digits.join('');\r\n}\r\n\r\nexport const binaryToDezimal = (binary) => {\r\n    let dezi = 0;\r\n\r\n    [...binary].reverse().forEach((digit, i) => {\r\n        if (digit === \"1\") {\r\n            dezi += Math.pow(2, i);\r\n        }\r\n    })\r\n\r\n    return dezi;\r\n}\r\n\r\nexport const binaryToDezimalBig = (binary) => {\r\n    let deziB = new bigdecimal.BigInteger(\"0\");\r\n    let base = new bigdecimal.BigInteger(\"2\");\r\n\r\n    [...binary].reverse().forEach((digit, i) => {\r\n        if (digit === \"1\") {\r\n            let x = base.pow(i)\r\n            deziB = deziB.add(x)\r\n        }\r\n    })\r\n\r\n    return deziB;\r\n}\r\n\r\nexport const binaryToHex = (binary) => {\r\n    let dezi = binaryToDezimal(binary)\r\n    return dezimalToHextetBinary(dezi, true);\r\n\r\n}\r\n\r\nexport const binaryToHexBig = (binary) => {\r\n    let deziB = binaryToDezimalBig(binary)\r\n    return dezimalToHextetBinary(deziB.toString(), true)\r\n\r\n}\r\n\r\nexport const anyNumberToDezimal = (anyNumber, base) => {\r\n    let dezi = 0;\r\n\r\n    [...anyNumber].reverse().forEach((d, i) => {\r\n        let digit\r\n        switch (d) {\r\n            case \"f\":\r\n                digit = 15\r\n                break\r\n            case \"e\":\r\n                digit = 14\r\n                break\r\n            case \"d\":\r\n                digit = 13\r\n                break\r\n            case \"c\":\r\n                digit = 12\r\n                break\r\n            case \"b\":\r\n                digit = 11\r\n                break\r\n            case \"a\":\r\n                digit = 10\r\n                break\r\n            default:\r\n                digit = d\r\n        }\r\n\r\n        dezi += digit * Math.pow(base, i);\r\n    })\r\n\r\n    return dezi;\r\n}\r\n\r\nexport const anyNumberToDezimalBig = (anyNumber, base) => {\r\n    let dezi = new bigdecimal.BigInteger(\"0\");\r\n    let baseBig = new bigdecimal.BigInteger(base.toString());\r\n\r\n    [...anyNumber].reverse().forEach((d, i) => {\r\n        let digit\r\n        switch (d) {\r\n            case \"f\":\r\n                digit = \"15\"\r\n                break\r\n            case \"e\":\r\n                digit = \"14\"\r\n                break\r\n            case \"d\":\r\n                digit = \"13\"\r\n                break\r\n            case \"c\":\r\n                digit = \"12\"\r\n                break\r\n            case \"b\":\r\n                digit = \"11\"\r\n                break\r\n            case \"a\":\r\n                digit = \"10\"\r\n                break\r\n            default:\r\n                digit = d\r\n        }\r\n\r\n        let digitBig = new bigdecimal.BigInteger(digit)\r\n        let a = baseBig.pow(i.toString())\r\n        let b = digitBig.multiply(a).toString()\r\n\r\n        dezi = dezi.add(b)\r\n    })\r\n\r\n    return dezi;\r\n}\r\n\r\nexport const addLeadingZeroes = (value, binarySize) => {\r\n    let size = binarySize ? binarySize : 8;\r\n    let digits = [...value];\r\n    while (digits.length < size) {\r\n        digits.unshift(\"0\")\r\n    }\r\n    let binary = digits.join('');\r\n    return binary;\r\n}\r\n\r\nexport const booleanANDBinary = (a, b) => {\r\n\r\n    let foo = [a, b].sort((i, j) => i.length > j.length ? 1 : -1);\r\n\r\n    while (foo[0].length < foo[1].length) {\r\n        foo[0] = \"0\" + foo[0];\r\n    }\r\n\r\n    let binary = \"\";\r\n\r\n    [...foo[0]].forEach((digit, i) => {\r\n        digit === \"1\" && foo[1][i] === \"1\" ? binary += \"1\" : binary += \"0\"\r\n    })\r\n\r\n    return binary\r\n}\r\n\r\nexport const isValidNumber = (value, digits) => {\r\n    return [...value].every(item => digits.includes(item))\r\n}\r\n\r\nexport const maxBinary = (value, valueB) => {\r\n    let exponent = [...value].filter(a => a === \"0\").length\r\n    let fooVal = exponent === 0 ? binaryToDezimal(valueB) : Math.pow(2, exponent) - 1\r\n    return fooVal\r\n}\r\n\r\nexport const maxBinaryBig = (value, valueB) => {\r\n    let exponent = [...value].filter(a => a === \"0\").length\r\n    let base = new bigdecimal.BigInteger(\"2\")\r\n    let foo = new bigdecimal.BigInteger(\"1\")\r\n    let val = base.pow(exponent.toString())\r\n    let baz = val.substract(foo)\r\n    let fooVal = exponent === 0 ? binaryToDezimalBig(valueB) : baz\r\n}\r\n\r\nexport const consecutiveBinary = (value) => {\r\n    return value.split(\"0\").filter(i => i !== \"\").length <= 1 && (value[0] !== \"0\" || [...value].every(item => item === \"0\"))\r\n}\r\n\r\nexport const getSubnetBits = (subnetOctets) => {\r\n    return subnetOctets.map(item =>\r\n        [...item].some(x => x === \"0\")\r\n            ? [...item].reduce((a, v) => v === \"1\" ? a + 1 : a, 0)\r\n            : 0\r\n    ).reduce((sum, x) => sum + x)\r\n}\r\n\r\nexport const getSubnetCount = (subnetOctets) => {\r\n    const subnetBits = subnetOctets.map(item =>\r\n        [...item].some(x => x === \"0\")\r\n            ? [...item].reduce((a, v) => v === \"1\" ? a + 1 : a, 0)\r\n            : 0\r\n    ).reduce((sum, x) => sum + x)\r\n    return Math.pow(2, subnetBits)\r\n}\r\n\r\nexport const getSubnetCountBig = (subnetOctets) => {\r\n    const subnetBits = subnetOctets.map(item =>\r\n        [...item].some(x => x === \"0\")\r\n            ? [...item].reduce((a, v) => v === \"1\" ? a + 1 : a, 0)\r\n            : 0\r\n    ).reduce((sum, x) => sum + x)\r\n\r\n    let base = new bigdecimal.BigInteger(\"2\");\r\n    return base.pow(subnetBits.toString())\r\n}\r\n\r\nexport const getSubnetCountStupid = (mask1, mask2) => {\r\n    let subnetBits = 0\r\n    mask1.forEach((item, i) => {\r\n        [...item].forEach((x, j) => {\r\n            if (x !== mask2[i][j]) {\r\n                subnetBits++\r\n            }\r\n        })\r\n    })\r\n    return Math.pow(2, subnetBits)\r\n}\r\n\r\nexport const getSubnetCountStupidBig = (mask1, mask2) => {\r\n    let subnetBits = 0\r\n    mask1.forEach((item, i) => {\r\n        [...item].forEach((x, j) => {\r\n            if (x !== mask2[i][j]) {\r\n                subnetBits++\r\n            }\r\n        })\r\n    })\r\n    let base = new bigdecimal.BigInteger(\"2\")\r\n    return base.pow(subnetBits.toString())\r\n}\r\n\r\nexport const getNetworkIncrement = (subnetOctets) => {\r\n    return Math.pow(2, subnetOctets.filter(item => item === \"0\").length)\r\n}\r\n\r\nexport const getNetworkIncrementBig = (subnetOctets) => {\r\n    let base = new bigdecimal.BigInteger(\"2\");\r\n    return base.pow(subnetOctets.filter(item => item === \"0\").length.toString())\r\n}\r\n\r\nexport const getMixedOctetIndex = (octets) => {\r\n    return octets.findIndex((x => ![...x].every(y => y === \"1\")))\r\n}\r\n\r\nexport const getDigits = (base) => {\r\n    return base === \"16\"\r\n        ? [...Array(10).keys(), ...[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]].map(x => x.toString())\r\n        : [...Array(parseInt(base)).keys()].map(x => x.toString())\r\n}\r\n\r\nexport const getNetworkIDs = (addr, subnetMask, fuckMask, ipV6) => {\r\n\r\n    let totalSize = ipV6 ? 128 : 32\r\n    let regExp = ipV6 ? new RegExp(/.{1,16}/, 'g') : new RegExp(/.{1,8}/, 'g')\r\n\r\n    const networkIncrement = getNetworkIncrementBig(subnetMask.flat().join('').split('')) // blyat\r\n    const baseNetwork = addr.map((octet, i) => booleanANDBinary(octet, subnetMask[i]))\r\n\r\n    const firstSubnet = [...baseNetwork]\r\n\r\n\r\n    let bla = 0\r\n    let subnets = []\r\n    let z = ipV6 ? ':' : '.'\r\n    let blaAdd = new bigdecimal.BigInteger(bla.toString());\r\n\r\n    for (var i = 0; i < getSubnetCountStupid(subnetMask, fuckMask); i++) {\r\n        // FML!!!\r\n        let networkID\r\n        let broadcast\r\n        let rangeStart\r\n        let rangeEnd\r\n\r\n        let addRange = new bigdecimal.BigInteger(\"1\");\r\n        let subRange = new bigdecimal.BigInteger(\"-1\");\r\n        let addBroadcast = networkIncrement.add(subRange);\r\n\r\n        let networkDezimalBig = binaryToDezimalBig([...firstSubnet].join('')).add(blaAdd)\r\n        let broadcastDezimalBig = networkDezimalBig.add(addBroadcast);\r\n        let rangeStartDezimalBig = networkDezimalBig.add(addRange);\r\n        let rangeEndDezimalBig = broadcastDezimalBig.add(subRange);\r\n\r\n        let networkBinaryBig = addLeadingZeroes(dezimalToBinaryBig(networkDezimalBig.toString()), totalSize)\r\n        let broadcastBinaryBig = addLeadingZeroes(dezimalToBinaryBig(broadcastDezimalBig.toString()), totalSize)\r\n        let rangeStartBinaryBig = addLeadingZeroes(dezimalToBinaryBig(rangeStartDezimalBig.toString()), totalSize)\r\n        let rangeEndBinaryBig = addLeadingZeroes(dezimalToBinaryBig(rangeEndDezimalBig.toString()), totalSize)\r\n\r\n        if (ipV6) {\r\n\r\n            networkID = networkBinaryBig.match(regExp).map(x => addLeadingZeroes(binaryToHexBig(x), 4)).join(z)\r\n            broadcast = broadcastBinaryBig.match(regExp).map(x => addLeadingZeroes(binaryToHexBig(x), 4)).join(z)\r\n            rangeStart = rangeStartBinaryBig.match(regExp).map(x => addLeadingZeroes(binaryToHexBig(x), 4)).join(z)\r\n            rangeEnd = rangeEndBinaryBig.match(regExp).map(x => addLeadingZeroes(binaryToHexBig(x), 4)).join(z)\r\n\r\n\r\n        }\r\n        else {\r\n\r\n            networkID = networkBinaryBig.match(regExp).map(x => binaryToDezimalBig(x)).join(z)\r\n            broadcast = broadcastBinaryBig.match(regExp).map(x => binaryToDezimalBig(x)).join(z)\r\n            rangeStart = rangeStartBinaryBig.match(regExp).map(x => binaryToDezimalBig(x)).join(z)\r\n            rangeEnd = rangeEndBinaryBig.match(regExp).map(x => binaryToDezimalBig(x)).join(z)\r\n\r\n        }\r\n\r\n        let reservedHosts = new bigdecimal.BigInteger(\"-2\")\r\n\r\n        subnets.push({ networkID, networkRange: [rangeStart, rangeEnd, networkIncrement.add(reservedHosts).toString()], broadcast })\r\n        blaAdd = blaAdd.add(networkIncrement)\r\n    }\r\n\r\n    return subnets\r\n}","import React from \"react\"\r\nimport { Table } from \"react-bootstrap\"\r\n\r\n\r\nconst SubnetResultComponent = (props) => {\r\n\r\n    const { subnets, ipV6 } = props\r\n\r\n    const shortenAddr = (addr) => {\r\n        if (!ipV6) {\r\n            return addr\r\n        }\r\n\r\n        let indices = []\r\n        let addrParts = addr.split(\":\")\r\n\r\n        for (var i = 0; i < addrParts.length; i++) {\r\n            if ([...addrParts[i]].every(x => x === \"0\")) {\r\n                if (indices.length === 0 || indices.indexOf(i - 1) !== -1) {\r\n                    indices.push(i)\r\n                    addrParts[i] = \"\"\r\n                }\r\n            }\r\n        }\r\n\r\n        addrParts = addrParts.map(x => x === \"0000\" ? \"0\" : x)\r\n        \r\n        if(indices.length) addrParts[indices[0]] = \"\"\r\n\r\n        let bla = addrParts.filter((x,i) => x !== \"\"  || i === indices[0]).join(\":\")\r\n\r\n        return bla.slice(-1) === \":\" ? bla + \":\" : bla\r\n    }\r\n\r\n    const tableData = subnets.map((subnet, i) => {\r\n        let { networkID, networkRange, broadcast } = subnet\r\n        return (\r\n            <tr key={i}>\r\n                <td>{i + 1}</td>\r\n                <td>{shortenAddr(networkID)}</td>\r\n                <td>{shortenAddr(networkRange[0])} - {shortenAddr(networkRange[1])} ({networkRange[2]} Hosts)</td>\r\n                <td>{shortenAddr(broadcast)}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    )\r\n\r\n    return (\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>NetworkID</th>\r\n                    <th>NetworkRange</th>\r\n                    <th>Broadcast</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tableData}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\n\r\nexport default SubnetResultComponent","import React, { useState } from \"react\";\r\nimport { Eye } from \"react-bootstrap-icons\";\r\nimport { Row, Col, InputGroup, FormControl, Button, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport {\r\n    binaryToDezimal,\r\n    isValidNumber,\r\n    dezimalToOctetBinary,\r\n    getNetworkIDs,\r\n    anyNumberToDezimal,\r\n    getDigits\r\n} from \"./utils\";\r\nimport SubnetResultComponent from \"./SubnetResult\"\r\n\r\n\r\nexport const IPV4NetworkingComponent = (props) => {\r\n\r\n    const [addrOctets, setAddrOctets] = useState([\"11000000\", \"10101000\", \"00000001\", \"00000000\"]);\r\n    const [addrDezimals, setAddrDezimals] = useState([192, 168, 1, 0]);\r\n    const [cidr, setCidr] = useState(24);\r\n    const [localCidr, setLocalCidr] = useState(24)\r\n\r\n    const [showBinary, setShowBinary] = useState(false)\r\n\r\n\r\n    const setDezimalHandler = (event, index) => {\r\n\r\n        const value = event.target.value === \"\" ? \"0\" : event.target.value\r\n        let digits = getDigits(\"10\")\r\n        let valid = isValidNumber(value, digits)\r\n\r\n        const number = anyNumberToDezimal(value, 2)\r\n\r\n        let min = 0\r\n        let max = 255\r\n\r\n        if (number >= min && number <= max && valid) {\r\n            let dezimals = [...addrDezimals]\r\n            dezimals[index] = value\r\n\r\n            let octets = [...addrOctets]\r\n            octets[index] = dezimalToOctetBinary(value)\r\n\r\n            setAddrDezimals(dezimals)\r\n            setAddrOctets(octets)\r\n\r\n        }\r\n    }\r\n\r\n    const setOctetHandler = (event, index) => {\r\n        let { value } = event.target;\r\n        if ([...value].every(n => [\"0\", \"1\"].includes(n))) {\r\n\r\n            let dezimals = [...addrDezimals]\r\n            dezimals[index] = binaryToDezimal(value)\r\n\r\n            let octets = [...addrOctets]\r\n            octets[index] = value\r\n\r\n            setAddrDezimals(dezimals)\r\n            setAddrOctets(octets)\r\n\r\n        }\r\n    }\r\n\r\n    const addLeadingZeroesHandler = (event, index) => {\r\n        let octets = [...addrOctets]\r\n        let size = 8\r\n        while (octets[index].length < size) {\r\n            octets[index] = '0' + octets[index]\r\n        }\r\n        setAddrOctets(octets)\r\n    }\r\n\r\n    //const styles = new Array(4).map(s => { })\r\n\r\n    const subOctets = [...Array(32).keys()].map((x, i) => i < cidr ? \"1\" : \"0\").join('').match(/.{1,8}/g)\r\n    const subDezimals = subOctets.map(oct => binaryToDezimal(oct))\r\n\r\n    const xlocalSubOctets = [...Array(32).keys()].map((x, i) => i < localCidr ? \"1\" : \"0\").join('').match(/.{1,8}/g)\r\n    const xlocalSubDezimals = xlocalSubOctets.map(oct => binaryToDezimal(oct))\r\n\r\n    const cidrRange = 33\r\n\r\n    const subnets = getNetworkIDs(addrOctets, xlocalSubOctets, subOctets, false)\r\n    //const subnets = []\r\n\r\n    return (\r\n        <>\r\n            <Row >\r\n                <h4>Network Address</h4>\r\n                <Col sm={{ span: 10 }}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <Button variant={showBinary ? 'primary' : 'secondary'} onClick={() => setShowBinary(!showBinary)}><Eye /></Button>\r\n                        {addrDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" onChange={(event) => { setDezimalHandler(event, i) }} />\r\n                        )}\r\n\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {addrOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\"\r\n                                    onChange={(event) => { setOctetHandler(event, i) }}\r\n                                    onBlur={(event) => { addLeadingZeroesHandler(event.target.value, i) }} />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n                <Col>\r\n                    <FloatingLabel label=\"CIDR\">\r\n                        <Form.Select value={cidr} onChange={(event) => setCidr(event.target.value)}>\r\n                            {[...Array(cidrRange).keys()].map((v, i) => <option key={i} value={i}>/{i}</option>)}\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <h4>SubnetMask</h4>\r\n                <Col>\r\n                    <InputGroup>\r\n                        {subDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" disabled />\r\n                        )}\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {subOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\" disabled />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row >\r\n                <h4>Local Subnetmask</h4>\r\n                <Col sm={{ span: 10 }}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <Button variant={showBinary ? 'primary' : 'secondary'} onClick={() => setShowBinary(!showBinary)}><Eye /></Button>\r\n                        {xlocalSubDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" disabled />\r\n                        )}\r\n\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {xlocalSubOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\" disabled />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n                <Col>\r\n                    <FloatingLabel label=\"CIDR\">\r\n                        <Form.Select value={localCidr} onChange={(event) => setLocalCidr(event.target.value)}>\r\n                            {[...Array(cidrRange).keys()].map((v, i) => <option key={i} value={i}>/{i}</option>).slice(cidr)}\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n            </Row>\r\n            <SubnetResultComponent subnets={subnets} />\r\n        </>\r\n    )\r\n\r\n}\r\nexport default IPV4NetworkingComponent","import React, { useState } from \"react\";\r\nimport { Eye } from \"react-bootstrap-icons\";\r\nimport { Row, Col, InputGroup, FormControl, Button, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport {\r\n    binaryToDezimal,\r\n    binaryToHex,\r\n    isValidNumber,\r\n    dezimalToHextetBinary,\r\n    dezimalToBinaryBig,\r\n    getNetworkIDs,\r\n    anyNumberToDezimal,\r\n    getDigits,\r\n    binaryToHexBig\r\n} from \"./utils\";\r\nimport SubnetResultComponent from \"./SubnetResult\"\r\n\r\n\r\nexport const IPV6NetworkingComponent = (props) => {\r\n\r\n    const [addrOctets, setAddrOctets] = useState([\r\n        \"0010000000000001\", \"0011001000000000\", \"0001000000000000\", \"0000000000000000\",\r\n        \"0000000000000000\", \"0000000000000000\", \"0000000000000000\", \"0000000000000000\"]);\r\n    const [addrDezimals, setAddrDezimals] = useState([\"2001\", \"3200\", \"1000\", \"0000\", \"0000\", \"0000\", \"0000\", \"0000\"]);\r\n    const [cidr, setCidr] = useState(48)\r\n    const [localCidr, setLocalCidr] = useState(51)\r\n\r\n    const [showBinary, setShowBinary] = useState(false)\r\n\r\n\r\n    const setDezimalHandler = (event, index) => {\r\n\r\n        const value = event.target.value === \"\" ? \"0\" : event.target.value\r\n        let digits = getDigits(\"16\")\r\n        let valid = isValidNumber(value, digits)\r\n\r\n        const number = anyNumberToDezimal(value, 16)\r\n\r\n        let min = 0\r\n        let max = 65535\r\n\r\n        if (number >= min && number <= max && valid) {\r\n            let dezimals = [...addrDezimals]\r\n            dezimals[index] = value\r\n\r\n            let octets = [...addrOctets]\r\n            octets[index] = dezimalToBinaryBig(number)//dezimalToHextetBinary(value)\r\n\r\n            setAddrDezimals(dezimals)\r\n            setAddrOctets(octets)\r\n\r\n        }\r\n    }\r\n\r\n    const setOctetHandler = (event, index) => {\r\n        let { value } = event.target;\r\n        if ([...value].every(n => [\"0\", \"1\"].includes(n))) {\r\n\r\n            let dezimals = [...addrDezimals]\r\n            //dezimals[index] = binaryToDezimal(value)\r\n            dezimals[index] = binaryToHex(value)\r\n\r\n            let octets = [...addrOctets]\r\n            octets[index] = value\r\n\r\n            setAddrDezimals(dezimals)\r\n            setAddrOctets(octets)\r\n\r\n        }\r\n    }\r\n\r\n    const onSetCidr = (event) => {\r\n        setCidr(event.target.value)\r\n        setLocalCidr(event.target.value)\r\n    }\r\n\r\n    const addLeadingZeroesHandler = (event, index) => {\r\n        let octets = [...addrOctets]\r\n        let size = 16\r\n        while (octets[index].length < size) {\r\n            octets[index] = '0' + octets[index]\r\n        }\r\n        setAddrOctets(octets)\r\n    }\r\n\r\n    //const styles = new Array(4).map(s => { })\r\n\r\n    const subOctets = [...Array(128).keys()].map((x, i) => i < cidr ? \"1\" : \"0\").join('').match(/.{1,16}/g)\r\n    const subDezimals = subOctets.map(oct => binaryToHexBig(oct))\r\n\r\n    const xlocalSubOctets = [...Array(128).keys()].map((x, i) => i < localCidr ? \"1\" : \"0\").join('').match(/.{1,16}/g)\r\n    const xlocalSubDezimals = xlocalSubOctets.map(oct => binaryToHexBig(oct))\r\n\r\n    const cidrRange = 65\r\n\r\n    const subnets = getNetworkIDs(addrOctets, xlocalSubOctets, subOctets, true)\r\n\r\n    return (\r\n        <>\r\n            <Row >\r\n                <h4>Network Address</h4>\r\n                <Col sm={{ span: 10 }}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <Button variant={showBinary ? 'primary' : 'secondary'} onClick={() => setShowBinary(!showBinary)}><Eye /></Button>\r\n                        {addrDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" onChange={(event) => { setDezimalHandler(event, i) }} />\r\n                        )}\r\n\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {addrOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\"\r\n                                    onChange={(event) => { setOctetHandler(event, i) }}\r\n                                    onBlur={(event) => { addLeadingZeroesHandler(event.target.value, i) }} />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n                <Col>\r\n                    <FloatingLabel label=\"CIDR\">\r\n                        <Form.Select value={cidr} onChange={onSetCidr}/* onChange={(event) => setCidr(event.target.value)} */>\r\n                            {[...Array(cidrRange).keys()].map((v, i) => <option key={i} value={i}>/{i}</option>)}\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <h4>SubnetMask</h4>\r\n                <Col>\r\n                    <InputGroup>\r\n                        {subDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" disabled />\r\n                        )}\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {subOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\" disabled />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row >\r\n                <h4>Local Subnetmask</h4>\r\n                <Col sm={{ span: 10 }}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <Button variant={showBinary ? 'primary' : 'secondary'} onClick={() => setShowBinary(!showBinary)}><Eye /></Button>\r\n                        {xlocalSubDezimals.map((val, i) =>\r\n                            <FormControl key={i} value={val} type=\"text\" disabled /* onChange={(event) => { setLocalSubDezimalHandler(event, i) }} */ />\r\n                        )}\r\n\r\n                    </InputGroup>\r\n                    {showBinary ?\r\n                        <InputGroup className=\"mb-3\">\r\n\r\n                            {xlocalSubOctets.map((val, i) =>\r\n                                <FormControl key={i} value={val} type=\"text\" disabled\r\n                                    /* onChange={(event) => { setLocalSubOctetHandler(event, i) }}\r\n                                    onBlur={(event) => { addLeadingZeroesHandler(event.target.value, i) }} */ />\r\n                            )}\r\n                        </InputGroup>\r\n                        : null\r\n                    }\r\n                </Col>\r\n                <Col>\r\n                    <FloatingLabel label=\"CIDR\">\r\n                        <Form.Select value={localCidr} onChange={(event) => setLocalCidr(event.target.value)}>\r\n                            {[...Array(cidrRange).keys()].map((v, i) => <option key={i} value={i}>/{i}</option>).slice(cidr)}\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Col>\r\n            </Row>\r\n            <SubnetResultComponent subnets={subnets} ipV6={true}/>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default IPV6NetworkingComponent","import { useState } from \"react\";\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Tabs, Tab } from \"react-bootstrap\";\r\nimport NumberConverter from \"./NumberConverter\";\r\nimport IPV4NetworkingComponent from \"./IPV4NetworkingComponent\";\r\nimport IPV6NetworkingComponent from \"./IPV6NetworkingComponent\"\r\n\r\n\r\nconst App = () => {\r\n\r\n\r\n    const [key, setKey] = useState(\"numberconverter\")\r\n\r\n    return (\r\n\r\n\r\n        <Container>\r\n            <Tabs\r\n                id=\"controlled-tab-example\"\r\n                activeKey={key}\r\n                onSelect={(k) => setKey(k)}\r\n                className=\"mb-3\"\r\n            >\r\n                <Tab eventKey=\"numberconverter\" title=\"NumberConverter\">\r\n                    <NumberConverter />\r\n                </Tab>\r\n                <Tab eventKey=\"networkipv4\" title=\"NetworkIPv4\">\r\n                    <IPV4NetworkingComponent />\r\n                </Tab>\r\n                <Tab eventKey=\"networkipv6\" title=\"NetworkIPv6\">\r\n                    <IPV6NetworkingComponent />\r\n                </Tab>\r\n            </Tabs>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}